<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="~/css/StyleSheet.css">
    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/vis.min.css">
    <script src="~/scripts/vis.js"></script>
    <script src="~/scripts/script.js"></script>
    <script src="~/scripts/jquery-3.3.1.js"></script>
    <script src="~/scripts/jquery.validate.min.js"></script>
    <script src="~/scripts/additional-methods.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
</head>
<body>
    <div>
        @RenderBody()
    </div>


    <script>

        var flaga_do_usuniecia = 0;
        var siec_do_usuniecia = "";
        var networks = [];
        var nodeIds, shadowState, nodesArray, nodes, edgesArray, edges, network;
        var flaga_do_odswiezenia;
        var schematy = [];
        var polaczenia = [];
        var clickedid, clickedid2;
        var helpid;
        var idrouter, idcomputer, idswitch = 0;
        var drew = $("#nameofnetworktoread").innerHTML;


        var connection = new signalR.HubConnectionBuilder().withUrl("/messages").build();

        connection.on("ReceiveMessage", function (message) {
            var options = '<option value="' + message + '">' + message + '</option>';
            $('#NetworkSchemas').append(options);
        });

        connection.on("CleanMessage", function () {
            $('#NetworkSchemas').html('');
        });

        connection.on("DeleteNetworkMessage", function (message) {
            var selectobject = document.getElementById("NetworkSchemas");
            for (var i = 0; i < selectobject.length; i++) {
                if (selectobject.options[i].value == message)
                    selectobject.remove(i);
            }

        });

        connection.on("UpdateNetworkMessage", function (message) {
            console.log("updatenetworkmessage");
            console.log("drew: " + drew);
            console.log("message: " + message);
            if (drew == message) {
                resetAllNodes();
                var szukam = document.getElementById("NetworkSchemas").value.toString();
                schematy = []
                polaczenia = []
                drew = szukam;
                $.ajax({
                    type: "GET",
                    url: "Home/GetNetwork",
                    data: { mystring: szukam },
                    contentType: "application/json",
                    dataType: "json",
                    success: function (result) {
                        nodes.add(result.routers);
                        nodes.add(result.computers);
                        nodes.add(result.switches);
                        edges.add(result.edges);
                    },
                    error: function (response) {
                        alert("error");
                    }

                })


                container = document.getElementById('mynetwork');
                var graph = { nodes: nodes, edges: edges };
                var options = {
                    manipulation: {
                        enabled: false,
                        addEdge: function (data, callback) {
                            callback(data);
                        }
                    },
                    interaction:
                    {
                        hover: true
                    }
                };
                network = new vis.Network(container, graph, options);

                network.on('click', function (properties) {
                    var ids = properties.nodes;
                    var ids2 = properties.edges;
                    clickedid = ids;
                    clickedid2 = ids2;
                    helpid = clickedid;
                    document.getElementById("objectparameters").reset();
                    document.getElementById("nameofelementform").value = nodes.get(clickedid)[0].label.toString(32);
                    document.getElementById("ipaddressform").value = nodes.get(clickedid)[0].ipaddress.toString(32);
                    document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                    document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                    document.getElementById("defaultgatewayform").value = nodes.get(clickedid)[0].defaultgateway.toString(32);
                    document.getElementById("idform").value = helpid.toString(32);

                });
                network.on("hoverNode", function (params) {
                    network.canvas.body.container.style.cursor = 'pointer';
                });


                window.onresize = function () { network.fit(); }




            }
        }
        );

        connection.start().catch(err => console.error(err.toString()));


        document.getElementById("save").addEventListener("click", event => {
            const message = document.getElementById("nameofnetwork").value;
            connection.invoke("AddNetworks", message).catch(err => console.error(err.toString()));
            event.preventDefault();
        });
        document.getElementById("deleteallnetworks").addEventListener("click", event => {
            connection.invoke("CleanNetworks").catch(err => console.error(err.toString()));
            event.preventDefault();
        });

        document.getElementById("deleteonenetwork").addEventListener("click", event => {
            const message = document.getElementById("NetworkSchemas").value;
            connection.invoke("DeleteOneNetwork", message).catch(err => console.error(err.toString()));
            event.preventDefault();
        });


        document.getElementById("updatenetworkid").addEventListener("click", event => {
                drew = document.getElementById("nameofnetworktoread").innerHTML;
                console.log(drew);
                console.log("addeventlissteren");
                var Polaczenia = [];
                var i = 0
                for (var key in edges._data) {
                    var value = edges._data[key];
                    Polaczenia.push(value);
                }
                var Obiekty = [];
                var i = 0
                for (var key in nodes._data) {
                    var value = nodes._data[key];
                    Obiekty.push(value);

                }

                var PostData = {
                    NazwaSieci: drew,
                    Polaczenia: Polaczenia,
                    Obiekty: Obiekty
                };


                $.ajax({
                    url: 'Home/Update',
                    data: JSON.stringify(PostData),
                    contentType: 'application/json',
                    type: 'POST',
                    success: function (result) {
                        console.log("sukces");
                    },
                    error: function (response) {
                        alert("error");
                    }


                });

           
        });


        function growIdRouter() {
            idrouter = idrouter + 1;
            return idrouter;
        }

        function growIdSwitch() {
            idswitch = idswitch + 1;
            return idswitch;
        }

        function growIdComputer() {
            idcomputer = idcomputer + 1;
            return idcomputer;
        }



        function updateNetwork() {      
            console.log("updatenetwork");
            const message = document.getElementById("NetworkSchemas").value.toString();
            connection.invoke("UpdateNetwork", message).catch(err => console.error(err.toString()));
            event.preventDefault();

        }


        function deleteNetwork() {
            flaga_do_odswiezenia = 1;

            var todelete = document.getElementById("NetworkSchemas").value.toString();
            $.ajax({
                url: 'Home/DeleteNetwork',
                data: JSON.stringify(todelete),
                contentType: 'application/json ; charset=utf-8',
                type: 'POST',
                dataType: 'json',
                success: function (result) {


                }
            })

        }


        function save() {
            flaga_do_odswiezenia = 1;
            var Polaczenia = [];
            var i = 0
            for (var key in edges._data) {
                var value = edges._data[key];
                Polaczenia.push(value);
            }
            var Obiekty = [];
            var i = 0
            for (var key in nodes._data) {
                var value = nodes._data[key];
                Obiekty.push(value);

            }

            var nameofnetwork = document.getElementById("nameofnetwork").value.toString();
            var PostData = {
                NazwaSieci: nameofnetwork,
                Polaczenia: Polaczenia,
                Obiekty: Obiekty
            };


            $.ajax({
                url: 'Home/Save',
                data: JSON.stringify(PostData),
                contentType: 'application/json',
                type: 'POST',
                success: function (result) {

                },
                error: function (response) {
                    alert("error");
                }


            });
            resetAllNodes();



        }

        function test() {
            $.ajax({
                type: "GET",
                url: "Home/GetNetworksNames",
                //data: Json,
                contentType: "application/json",
                dataType: "json",
                success: function (result) {
                },
                error: function (response) {
                    alert("error");
                }

            })
        }

        function deleteAllNetworks() {

            flaga_do_odswiezenia = 1;
            $.ajax({
                url: 'Home/DeleteAllNetworks',
                contentType: 'application/json ; charset=utf-8',
                type: 'POST',
                success: function (result) {

                }
            })
            document.getElementById("NetworkSchemas").options.length = 0;

        }

        function draw() {
            resetAllNodes();
            var szukam = document.getElementById("NetworkSchemas").value.toString();

        
            $("#nameofnetworktoread").html(szukam);
            schematy = []
            polaczenia = []
            $.ajax({
                type: "GET",
                url: "Home/GetNetwork",
                data: { mystring: szukam },
                contentType: "application/json",
                dataType: "json",
                success: function (result) {
                    nodes.add(result.routers);
                    nodes.add(result.computers);
                    nodes.add(result.switches);
                    edges.add(result.edges);
                },
                error: function (response) {
                    alert("error");
                }

            })


            container = document.getElementById('mynetwork');
            var graph = { nodes: nodes, edges: edges };
            var options = {
                manipulation: {
                    enabled: false,
                    addEdge: function (data, callback) {
                        callback(data);
                    }
                },
                interaction:
                {
                    hover: true
                }
            };
            network = new vis.Network(container, graph, options);

            network.on('click', function (properties) {
                var ids = properties.nodes;
                var ids2 = properties.edges;
                clickedid = ids;
                clickedid2 = ids2;
                helpid = clickedid;
                document.getElementById("objectparameters").reset();
                document.getElementById("nameofelementform").value = nodes.get(clickedid)[0].label.toString(32);
                document.getElementById("ipaddressform").value = nodes.get(clickedid)[0].ipaddress.toString(32);
                document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                document.getElementById("defaultgatewayform").value = nodes.get(clickedid)[0].defaultgateway.toString(32);
                document.getElementById("idform").value = helpid.toString(32);

            });
            network.on("hoverNode", function (params) {
                network.canvas.body.container.style.cursor = 'pointer';
            });


            window.onresize = function () { network.fit(); }


        }

        $(function () {

            $.ajax({
                type: "GET",
                url: "Home/GetNetworksNames",
                contentType: "application/json",
                dataType: "json",
                success: function (result) {
                },
                error: function (response) {
                    alert("error");
                }

            }).done(function (result) {
                if (result.length > 0) {
                    $('#NetworkSchemas').html('');
                    var options = '';
                    options += '<';
                    for (var i = 0; i < result.length; i++) {
                        options += '<option value="' + result[i].value + '">' + result[i].value + '</option>';
                    }
                    $('#NetworkSchemas').append(options);

                }
            }).fail(function (error) {
                alert(error.StatusText);
            });
        });





        function startNetwork() {
            // this list is kept to remove a random node.. we do not add node 1 here because it's used for changes
            nodeIds = [];
            shadowState = false;


            // create an array with nodes
            nodesArray = [

            ];
            nodes = new vis.DataSet(nodesArray);

            // create an array with edges
            edgesArray = [
            ];
            edges = new vis.DataSet(edgesArray);

            // create a network
            var container = document.getElementById('mynetwork');
            var data = {
                nodes: nodes,
                edges: edges
            };
            var options = {
                manipulation: {
                    enabled: false,
                    addEdge: function (data, callback) {
                        callback(data);
                        var dataobject = JSON.stringify({
                            'from': data.from, 'to': data.to, 'id': data.id

                        });

                    }
                },
                interaction:
                {
                    hover: true
                }
            };

            network = new vis.Network(container, data, options);
            network.on('click', function (properties) {
                var ids = properties.nodes;
                var ids2 = properties.edges;
                var clickedNodes = nodes.get(ids);
                var clickedNodes2 = edges.get(ids2);
                clickedid = ids;
                clickedid2 = ids2;
                helpid = clickedid;
                document.getElementById("objectparameters").reset();
                document.getElementById("nameofelementform").value = nodes.get(clickedid)[0].label.toString(32);
                document.getElementById("ipaddressform").value = nodes.get(clickedid)[0].ipaddress.toString(32);
                document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                document.getElementById("maskform").value = nodes.get(clickedid)[0].mask.toString(32);
                document.getElementById("defaultgatewayform").value = nodes.get(clickedid)[0].defaultgateway.toString(32);
                document.getElementById("idform").value = helpid.toString(32);

              
            });
            network.on("hoverNode", function (params) {
                network.canvas.body.container.style.cursor = 'pointer';
            });
            window.onresize = function () { network.fit(); }
        }
        function cleanform() {
            document.getElementById("objectparameters").reset();
        }
        function submitform() {

            var newID = helpid.toString(32);
            var NewIpAddress = document.getElementById('ipaddressform').value;
            var NewMask = document.getElementById('maskform').value;
            var NewDefaultGateway = document.getElementById('defaultgatewayform').value;
            nodes.update({ id: newID, ipaddress: NewIpAddress, mask: NewMask, defaultgateway: NewDefaultGateway, "title": "id: " + newID + "</br>" + "IP address: " + NewIpAddress + "</br>" + "Mask: " + NewMask + "</br>" + "Default Gateway: " + NewDefaultGateway });

            document.getElementById("objectparameters").submit();
            return false;


        }


        function addConnection() {
            network.enableEditMode();
            network.addEdgeMode();
        }

        function addComputer() {
            var newId = (Math.random() * 1e7).toString(32);
            nodes.add({
                id: newId, label: "Computer".toString(32), ipaddress: "", mask: "", defaultgateway: "", image: "img/computer.png", shape: "image", "title": "id: " + newId + "</br>" + "IP address: " + "</br>" + "Mask: " + "</br>" + "Default Gateway: "
            });
            nodeIds.push(newId);
        }

        function addRouter() {
            var newId = (Math.random() * 1e7).toString(32);
            nodes.add({ id: newId, label: "Router".toString(32), ipaddress: "", mask: "", defaultgateway: "", image: "img/Router.jpg", shape: "image", "title": "id: " + newId + "</br>" + "IP address: " + "</br>" + "Mask: " + "</br>" + "Default Gateway: " });
            nodeIds.push(newId);
        }

        function addSwitch() {
            var newId = (Math.random() * 1e7).toString(32);
            nodes.add({ id: newId, label: "Switch".toString(32), ipaddress: "", mask: "", defaultgateway: "", image: "img/Switch.jpg", shape: "image", "title": "id: " + newId + "</br>" + "IP address: " + "</br>" + "Mask: " + "</br>" + "Default Gateway: " });

            nodeIds.push(newId);
        }


        function removeRandomNode() {
            var randomNodeId = nodeIds[Math.floor(Math.random() * nodeIds.length)];
            nodes.remove({ id: randomNodeId });

            var index = nodeIds.indexOf(randomNodeId);
            nodeIds.splice(index, 1);
        }

        function resetAllNodes() {
            document.getElementById("objectparameters").submit();
            nodes.clear();
            edges.clear();
            nodes.add(nodesArray);
            edges.add(edgesArray);
        }

        function deleteEdge() {
            edges.remove(clickedid2);
        }

        function deleteItem() {

            document.getElementById("objectparameters").submit();
            nodes.remove(clickedid);
        }

        function resetAll() {
            if (network !== null) {
                network.destroy();
                network = null;
            }
            startNetwork();
        }

        startNetwork();
    </script>
</body>
</html>
